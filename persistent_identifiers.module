<?php

/**
 * @file
 * Contains the persistent_identifiers.module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_form_node_form_alter().
 */
function persistent_identifiers_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('persistent_identifiers.settings');
  $entity = $form_state->getFormObject()->getEntity();
  $content_type = $entity->bundle();
  $allowed_types = $config->get('persistent_identifiers_bundles');

  if (!in_array($content_type, $allowed_types, TRUE)) {
    return;
  } 

  if (\Drupal::currentUser()->hasPermission('mint persistent identifiers')) {
    $minter = \Drupal::service($config->get('persistent_identifiers_minter'));
    $pid_type = $minter->getPidType();
    $form['persistent_identifiers_node_options'] = [
      '#type' => 'fieldset',
      '#access' => TRUE,
      '#title' => t('Persistent Identifier'),
      '#weight' => 99,
    ];
    $form['persistent_identifiers_node_options']['mint_and_persist'] = [
      '#type' => 'checkbox',
      '#title' => t('Create @pid_type', ['@pid_type' => $pid_type]),
      '#attributes' => [
        'id' => 'persistent_identifiers_mint_and_persist',
      ],
    ];
    $form['actions']['submit']['#submit'][] = 'persistent_identifiers_mint_from_form';
  }
}

/**
 * Submit callback.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state.
 */
function persistent_identifiers_mint_from_form(array &$form, FormStateInterface $form_state) {
  $config = \Drupal::config('persistent_identifiers.settings');
  $entity = $form_state->getFormObject()->getEntity();
  $content_type = $entity->bundle();
  $allowed_types = $config->get('persistent_identifiers_bundles');
  $mint_and_persist = $form_state->getValue('mint_and_persist', FALSE);
  if ($mint_and_persist && $entity->getEntityTypeId() == 'node' && in_array($content_type, $allowed_types, TRUE)) {
    $minter = \Drupal::service($config->get('persistent_identifiers_minter'));
    $pid = $minter->mint($entity, $form_state);
    if (is_null($pid)) {
      \Drupal::logger('persistent_identifiers')->warning(t("Persistent identifier not created for node @nid.", ['@nid' => $entity->id()]));
      \Drupal::messenger()->addWarning(t("Problem creating persistent identifier for this node. Details are available in the Drupal system log."));
      return;
    }
    $persister = \Drupal::service($config->get('persistent_identifiers_persister'));
    if ($persister->persist($entity, $pid)) {
      \Drupal::logger('persistent_identifiers')->info(t("Persistent identifier %pid created for node @nid.", ['%pid' => $pid, '@nid' => $entity->id()]));
      \Drupal::messenger()->addStatus(t("Persistent identifier %pid created for this node.", ['%pid' => $pid]));
    }
    else {
      \Drupal::logger('persistent_identifiers')->warning(t("Persistent identifier not created for node @nid.", ['@nid' => $entity->id()]));
      \Drupal::messenger()->addWarning(t("Problem creating persistent identifier for this node. Details are available in the Drupal system log."));
    }
  }
}

/**
 * Implements hook_jsonld_alter_normalized_array().
 */
function persistent_identifiers_jsonld_alter_normalized_array(EntityInterface $entity, array &$normalized, array $context) {
  if ($entity->getEntityTypeId() == 'node') {
    $config = \Drupal::config('persistent_identifiers.settings');
    $map_to_schema_sameas = $config->get('persistent_identifiers_map_to_schema_sameas');
    $resolver_base_url = $config->get('persistent_identifiers_resolver_base_url');
    if (!$map_to_schema_sameas) {
      return;
    }
    $doi_field_name = $config->get('persistent_identifiers_target_field');
    if ($entity->hasField($doi_field_name)) {
      $doi_field_values = $entity->get($doi_field_name)->getValue();
      $identifiers = array_filter(array_map(
        fn($value): string => (isset($value['value'])) ? $value['value'] : "",
        $doi_field_values
      ));
    }

    if (isset($normalized['@graph'])) {
      foreach ($identifiers as $id) {
        if (strlen($id) && !is_array($normalized["@graph"])) {
          $normalized['@graph'] = [$normalized['@graph']];
        }
        $normalized['@graph'][0]['http://schema.org/sameAs'][] = [
          '@id'  => $resolver_base_url . $id,
        ];
      }
    }
  }
}
